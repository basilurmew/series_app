from sign_comparison import *from tree_form import *from checking import full_checkfrom series import Seriesimport sympy as spdef tree_solution(expr:str) -> str:    """    Функция, которая получает пошаговое решение в виде строки    Args:        expr (str): Общий член численного ряда    Returns:        str: Пошаговое решение в виде строки    """    check = full_check(expr)    if check[0]:        s = Series(sp.sympify(expr), check[1][0])    else:        return "Enter Erorr"    if nth_test(s)[0]:        print("Необходымый признак выполняется, необходим дополнительный анализ")        if is_geometric(s):            print("Это геометрический ряд")            if geometric_test(s):                return "Ряд сходится как геометрический ряд"            else:                return 'Ряд расходится как геометрический ряд'        else:            if is_harmonic(s):                print("Это обобщенный гармонический ряд")                if harmonic_test(s):                    return "Ряд сходится как обобщенный гармонический"                else:                    return "Ряд расходтся как обобщенный гармонический"            else:                dal_test = None                if is_factorial(s.get_expr()):                    print("Общий член ряда содержит факториал ")                    print("Применим признак Даламбера")                    dal_test = is_dalamber_test(s)[0]                    if dal_test:                        if dal_test == "1":                            return "Ряд сходится по признаку Даламбера"                        else:                            return "Ряд расходится по признаку Даламбера"                    else:                        print("Признак Даламбера не дал ответа и")                if not is_factorial(s.get_expr()) or not dal_test:                    print("Воспользуемся признаком Коши")                    cauchy_test = is_cauchy_test(s)[0]                    if cauchy_test:                        if cauchy_test == "1":                            return "Ряд сходится по радикально признаку Коши"                        else:                            return "Ряд расходится по радикально признаку Коши"                    else:                        print("Радикальный признак Коши не дал ответа")                        print("Проверим содержит ли общий член ряда логариф")                        if not is_log(s.get_expr()):                            print("Общий член ряда не содержит логарифм")                            print("Применим признак Раабе")                            raabe_test = is_raabe_test(s)[0]                            if raabe_test:                                if raabe_test == "1":                                    return "Ряд сходится по признаку Раабе"                                else:                                    return "Ряд расходится по признаку Раабе"                            else:                                print("Применим признак Бертрана")                                bertran_test = is_bertran_test(s)[0]                                if bertran_test:                                    if bertran_test == "1":                                        return "Ряд сходится по признаку Бертрана"                                    else:                                        return "Ряд расходится по признаку Бертрана"                                else:                                    return "Признак Гаусса пока в разработке"                        else:                            print("Общий член ряда содержит логарфм")                            return "Интегральный признак пока в разработке"    else:        return "Ряд расходится, так как невыполняется необх. усл. сходимости"# row = "log(n/(n-1))**(3/2)/ (sqrt(n) - sqrt(n - 1))"# row = " (2*n-1)!!/((2*n)!!*(2*n+1))"# print(tree_solution(row))