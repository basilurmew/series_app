from sign_comparison import *from tree_form import *from checking import full_checkfrom series import Seriesimport sympy as sp#пока в разработке бро...def tree_solution(s):    """    Функция, которая получает пошаговое решение в виде строки    Args:        s (Series): Числовой ряд    Returns:    """    passdef bertran_to_gauss(s):    """    Функция, которая реализует блок схемы решения(от Бертрана к Гауссу)    Args:        s (Series): числовой ряд    Returns:    """    bertran = is_bertran_test(s)    if bertran.get_ans() == 1:        print("ряд сходится по признаку Бертрана")        return None    elif bertran.get_ans() == -1:        print("ряд расходится по признаку Бертрана")        return None    else:        print("признак Бертрана не дал результатов")        print("идем дальше")        gauss = is_gauss_test(s)        if gauss.get_ans() == 1:            print(f'ряд сходится по признаку Гаусса. {gauss.get_steps()}')            return None        elif gauss.get_ans() == -1:            print(f'ряд расходится по признаку Гаусса. {gauss.get_steps()}')            return None        else:            print("проблемы...")            return Nonedef cauchy_to_log(s):    """    Функция, которая реализует блок схемы решения(от пирзнака Коши до...)    Args:        s (Series): чилсовой ряд    Returns:    """    cauchy = is_cauchy_test(s)    if cauchy.get_ans() == 1:        print("ряд сходится по радикальному признаку Коши")        return None    elif cauchy.get_ans() == -1:        print("ряд расходится по радикальному признаку Коши")        return None    else:        print("радикальный признак Коши не дал результатов")        print("идем дальше")        if is_log(s.get_expr()):            if check_statement(s):                integral = is_integral_test(s)                if integral.get_ans() == 1:                    print("ряд сходится по интегральному признаку Коши")                    return None                elif integral.get_ans() == -1:                    print("ряд расходится по интегральному признаку Коши")                    return None                else:                    print("интегральный признак Коши не дал результатов")                    print("идем дальше")                    return bertran_to_gauss(s)            else:                return bertran_to_gauss(s)        else:            raabe = is_raabe_test(s)            if raabe.get_ans() == 1:                print("ряд сходится по признаку Раабе")                return None            elif raabe.get_ans() == -1:                print("ряд расходится по признаку Раабе")                return None            else:                print("признак Раабе не дал результатов")                print("идем дальше")                return bertran_to_gauss(s)def left_tree_solution(s):    """    Функция, которая является левой веткой дерева исслевадования числового ряда        s (Series): числовой ряд    Returns:    """    harmonic = is_harmonic_test(s)    if harmonic.get_ans() == 1:        print("ряд сходится как гармонический")        return None    elif harmonic.get_ans() == -1:        print("ряд расходится как гармонический")        return None    else:        print("ряд не является гармоническим")        print("идем дальше")        if is_factorial(s.get_expr()):            dalamber = is_dalamber_test(s)            if dalamber.get_ans() == 1:                print("ряд сходится по признаку Даламбера")                return None            elif dalamber.get_ans() == -1:                print("ряд расхоидтся по признаку Даламбера")                return None            else:                print("признак Даламбера не дал результатов")                print("идем дальше")                return cauchy_to_log(s)        else:            return cauchy_to_log(s)s = sp.simplify("log(n/(n-1))**(3/2)/ (sqrt(n) - sqrt(n - 1))")# s = " (2*n-1)!!/((2*n)!!*(2*n+1))"print(left_tree_solution(Series(s,"n")))