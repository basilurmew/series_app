#checking  is a common member of a series is appropriatefrom stack import Stackfrom constants import *import sympy as spdef check_brackets(expr:str) -> bool:    s = Stack()    for i in expr:        if i == '(':            s.push(i)        elif i == ')' and s.peek() == '(':            s.pop()        elif i == ")":            s.push(i)    if s.is_empty():        return True    else:        return Falsedef is_bool(bool_list:list) -> bool:    if False in bool_list:        return False    else:        return Truedef is_correct(expr:str) -> bool:    if len(expr.args) < 1:        return True    if isinstance(expr, (sp.Add, sp.Mul, sp.Pow)) or str(type(expr)) in function_list:        return is_bool([is_correct(i) for i in expr.args])    else:        return Falsedef find_var(expr:str):    expr = (" " + expr + " ").lower()    var_list = list()    for i in range(1, len(expr) - 1):        if expr[i] in alphabet:            if expr[i - 1] not in alphabet and expr[i + 1] not in alphabet:                if expr[i] not in var_list:                    var_list.append(expr[i])    return var_listdef full_check(expr: str) -> tuple:    expr = expr.replace(" ", "")    if check_brackets(expr):        var = find_var(expr)        if len(var) == 1:            try:                expr = sp.sympify(expr)            except:                print("Expression error!")                return (False, "Expression error!")        else:            print("Var was not defined")            return (False, "Var was not defined")        if is_correct(expr):            return (True, var[0])        else:            print("Expression error!")            return (False, "Expression error!")    else:        print("Brackets error!")        return (False, "Brackets error!")