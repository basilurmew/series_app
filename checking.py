"""Проверка является ли введенный общий член ряда корректным"""from stack import Stackfrom constants import *import sympy as spdef check_brackets(expr):    """    Функция, которая проверяет корректно ли введены скобки    Args:        expr (str): математическое выражение    Returns:        bool: True - корректно, False - некорректно    """    s = Stack()    for i in expr:        if i == '(':            s.push(i)        elif i == ')' and s.peek() == '(':            s.pop()        elif i == ")":            s.push(i)    if s.is_empty():        return True    else:        return Falsedef is_bool(bool_list):    """    Функция которая проверяет состоит ли весь список из True значений    Args:        bool_list (list): Список, который состоит из булевых значений    Returns:        bool: True - все элементы True, False - хоть один элемент False    """    if False in bool_list:        return False    else:        return Truedef is_correct(expr):    """    Функция, которая проверяет, что математическое выражение математически правильно введено    Args:        expr (str): математическое выражение    Returns:        bool: True - выражение корректно, False - некоректно    """    if len(expr.args) < 1:        return True    if isinstance(expr, (sp.Add, sp.Mul, sp.Pow)) or str(type(expr)) in function_list:        return is_bool([is_correct(i) for i in expr.args])    else:        return Falsedef find_var(expr):    """    Функция, которая возвращает список независимых переменных выражения    Args:        expr (str): Математическое выражние    Returns:        list: Список найденных независимых переменных    """    expr = (" " + expr + " ").lower()    var_list = list()    for i in range(1, len(expr) - 1):        if expr[i] in alphabet:            if expr[i - 1] not in alphabet and expr[i + 1] not in alphabet:                if expr[i] not in var_list:                    var_list.append(expr[i])    return var_listdef full_check(expr):    """    Функция, которая выполняет полную проверку выражения на корректность    Args:        expr (str): Математическое выражение    Returns:        tuple:    """    expr = expr.replace(" ", "")    if check_brackets(expr):        var = find_var(expr)        if len(var) <= 1:            try:                if len(var) ==1:                    if isinstance(expr, tuple):                        return expr                expr = sp.sympify(expr)            except:                return False, "Ошибка ввода!"        else:            return False, "Переменная не определена"        if is_correct(expr):            if len(var) == 1:                return True, var[0]            else:                return True, "n"        else:            return False, "Ошибка ввода"    else:        return False, "Ошибка! Проблема со скобками!"