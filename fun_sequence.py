"""Модуль реализации ФП"""import sympy as spfrom series import Seriesclass Fun_sequence:    """    Класс для представления такой сущности как ФП    """    def __init__(self, expr, var,x):        """        Метод инициализации объекта класса        Args:            expr (sympy.Expr): SymPy выражение            var (str): переменная индексации            x (str): независимая переменная        """        self.expr = expr        self.var = sp.Symbol(var)        self.x = sp.Symbol(x)    def get_expr(self):        """        метод получения выражения ФП        Returns:            sympy.Expr: SymPy выражение        """        return self.expr    def get_expr_str(self):        """        Метод получения строкового представления ФП        Returns:            str: Строкое представление ФП        """        return str(self.expr)    def get_var(self):        """        Метод получения переменной индексации        Returns:            sympy.Symbol: Переменная индексации        """        return self.var    def get_var_str(self):        """        Метод получения строкового представления переменной индексации        Returns:            str: Строковое представление переменной индексации        """        return str(self.var)    def get_x(self):        """        Метод получения независимой переменной        Returns:            sp.Symbol: Независимая переменная        """        return  self.x    def get_x_str(self):        """        Метод получение строкового представления независимой переменной        Returns:            str: Строковое представление независимой переменной        """        return str(self.x)    def get_value(self, val):        """        Метод получения выражиния в определенной точке        Args:            val (sp.Number): значение точки        Returns:            Series: возвращает числовой ряд        """        expr = self.expr.subs(self.x, val)        return Series(expr, self.get_var_str())def pointwise_limit(s):    """    Функция для нахождения поточечного предела    Args:        s (Fun_sequence): ФП    Returns:        tuple: 1 элемент - значение предела(None,если неконечный), 2 элемент: True - предел сущ.,False - не сущ.    """    expr = s.get_expr()    x = s.get_x()    var = s.get_var()    limit = sp.limit(expr, var,float("inf"))    if isinstance(limit,(sp.core.numbers.NaN, sp.core.numbers.Infinity)) == True:        return (None, False)    else:        return (limit,True)def sup_criterion(s):    """    Функция, которая проверяет выполнения супремального критерия    Args:        s (Fun_sequence): ФП    Returns:        bool: True - критерий выполняется, False - не выполняется    """    l = pointwise_limit(s)    if not l[-1]:        return False    else:        expr = sp.Abs(s.get_expr() - l[0])        diff = sp.diff(expr, s.get_var())        points = sp.solve(diff, s.get_x())        print(points)        return None