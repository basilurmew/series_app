#class for storing functional sequenceimport sympy as spfrom series import Seriesclass Fun_sequence:    def __init__(self, expr, var,x):        self.expr = expr        self.var = sp.Symbol(var)        self.x = sp.Symbol(x)    def get_expr(self):        return self.expr    def get_expr_str(self):        return str(self.expr)    def get_var(self):        return self.var    def get_var_str(self):        return str(self.var)    def get_x(self):        return  self.x    def get_x_str(self):        return str(self.x)    #get value at the certain point    def get_value(self, val):        expr = self.expr.subs(self.x, val)        return Series(expr, self.get_var_str())def pointwise_limit(s:Fun_sequence):    expr = s.get_expr()    x = s.get_x()    var = s.get_var()    limit = sp.limit(expr, var,float("inf"))    if isinstance(limit,(sp.core.numbers.NaN, sp.core.numbers.Infinity)) == True:        return (None, False)    else:        return (limit,True)def sup_criterion(s:Fun_sequence):    l = pointwise_limit(s)    if not l[-1]:        return False    else:        expr = sp.Abs(s.get_expr() - l[0])        diff = sp.diff(expr, s.get_var())        points = sp.solve(diff, s.get_x())        print(points)        return None