"""Модуль, в котором реализованы функции, которые позволяют узнать, что входит в общий член численного ряда"""import sympy as spdef is_bool_and(bool_list):    """    Функция, которая проверяет все ли в bool_list элементы True    """    if False in bool_list:        return False    else:        return Truedef is_bool_or(bool_list):    """    Функция, которая проверяет если ли в bool_list хоть один элемент True    """    return True in bool_listdef is_exponential_polynomial_factorial(expr):    """    Функция, которая проверяет ялвяется ли SymPy выражение комбинацией полиномов, факториалов, и базовых мат. операций    Args:        expr(sympy.core): математическое выражение    Returns:        bool: True - является, False - не является    """    if len(expr.args) < 2:        if isinstance(expr, (sp.factorial, sp.factorial2, sp.Integer, sp.Symbol)):            return True        else:            return False    if isinstance(expr, (sp.Add, sp.Mul, sp.Pow)):            return is_bool_and([is_exponential_polynomial_factorial(i) for i in expr.args])    else:        return Falsedef is_factorial(expr):    """    Функция, которая проверяет входит ли в SymPy выражение факториал(двойной)    Args:        expr: математическое выражение    Returns:        bool: True - факториал(двойной) присутствует, False - отсутствует    """    if len(expr.args) < 2:        if isinstance(expr, (sp.factorial, sp.factorial2)):            return True        else:            return False    if isinstance(expr, (sp.Add, sp.Mul, sp.Pow)):            return is_bool_or([is_factorial(i) for i in expr.args])    else:        return Falsedef is_log(expr):    """    Функция, которая проверяет входит ли в SymPy выражение логарифм    Args:        expr: математическое выражение    Returns:        bool: True - логарифм присутствует, False - отсутствует    """    if len(expr.args) < 2:        if isinstance(expr, sp.log):            return True        else:            return False    if isinstance(expr, (sp.Add, sp.Mul, sp.Pow)):            return is_bool_or([is_log(i) for i in expr.args])    else:        return False